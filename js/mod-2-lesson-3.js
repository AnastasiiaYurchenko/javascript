// –ó–∞–¥–∞—á–∞
// –°—É–º–º–∞ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª

// const numbers = [1, 2, 5, 7, 8, 9, 10, 12, 25];
// let total = 0;

// for ( let i = 0; i < numbers.length; i += 1) {
//     console.log(numbers[i])

//     if (numbers[i] % 2 === 0) {
//         console.log('–ß–µ—Ç–Ω–æ–µ', numbers[i])
//         total += numbers[i]
//     }
// }
// console.log('—Ç–æ—Ç–∞–ª:', total)

// –∏–ª–∏

// for (const number of numbers) {
//     if (number % 2 === 0) {
//         console.log('–ß–µ—Ç–Ω–æ–µ', number);
//         total += number;
//     }
// }
// console.log('—Ç–æ—Ç–∞–ª:', total)

// –∏–ª–∏ –ª–æ–≥–∏–∫–∞ –æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ

// for (const number of numbers) {

//     if (number % 2 !== 0) {
//         console.log('–ù–µ—á–µ—Ç–Ω–æ–µ, —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', number);
//         continue
//     }
//     total += number;
// }
// console.log('—Ç–æ—Ç–∞–ª:', total)

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ –ª–æ–≥–∏–Ω–∞
 * - –ï—Å–ª–∏ –ª–æ–≥–∏–Ω–∞ –Ω–µ—Ç, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ª–æ–≥–∏–Ω] –Ω–µ –Ω–∞–π–¥–µ–Ω.'
 * - –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª–æ–≥–∏–Ω, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [–ª–æ–≥–∏–Ω] –Ω–∞–π–¥–µ–Ω.'
 *
 * - –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ for
 * - –ü–æ—Ç–æ–º —á–µ—Ä–µ–∑ for...of
 * - –õ–æ–≥–∏–∫–∞ break
 * - –ú–µ—Ç–æ–¥ includes() —Å —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
 */

// const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n'];
// const loginToFind = 'poly1scute';
// let message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.`;

// for (let i = 0; i < logins.length; i += 1){
//     const login = logins[i];
//     console.log(login);

//     if (loginToFind === login) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.`
//         break
//     }
// }
// console.log(message)

// –∏–ª–∏

// for (const login of logins) {
//     console.log(login);
//     if (loginToFind === login) {
//         message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.`
//         break
//     }

// }
//  console.log(message)

// –∏–ª–∏

// message = logins.includes(loginToFind) ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–∞–π–¥–µ–Ω.` : `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${loginToFind} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
// console.log(message)

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ,
 * –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —á–∏—Å–ª–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è).
 */

// const numbers = [51, 18, 13, 24, 7, 85, 19];
// let smallestNumber = numbers[0];

// for (const number of numbers) {
//     if (number < smallestNumber) {
//         smallestNumber = number;
//     }
// }
// console.log('smallestNumber:', smallestNumber);

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π.
 * –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ ¬´JavaScript¬ª, —Ç–æ –Ω–∞ –≤—ã—Ö–æ–¥–µ –¥–æ–ª–∂–µ–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ ¬´jAVAsCRIPT¬ª.
 */

// const string = 'qWeRTzxCv';
// const letters = string.split('');
// console.log(letters);
// let invertedString = '';

// for (const letter of letters) {
//     console.log(letter);
//     if (letter === letter.toLowerCase()) {
//         invertedString += letter.toUpperCase();
//     } else {
//         invertedString += letter.toLowerCase();
//     }
// }

// console.log('invertedString:', invertedString);

// –∏–ª–∏

// for (const letter of letters) {

//     const isEqual = letter === letter.toLowerCase();

//     invertedString += isEqual ? letter.toUpperCase() : letter.toLowerCase();
// }
// console.log(invertedString);

/*
 * –î–µ–ª–∞–µ–º slug –≤ URL –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ dev.to)
 * –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
 *
 * - –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
 * - –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
 * - –°—à–∏–≤–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
 */

// –î–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è top-10-benefits-of-react-framework

// const title = 'Top 10 benefits of React framework';

// const normalizedTitle = title.toLowerCase();
// console.log(normalizedTitle);

// const words = normalizedTitle.split(' ');
// console.log(words);

// const slug = words.join('-');
// console.log(slug);

// –∏–ª–∏

// const slug = title.toLowerCase().split(' ').join('-');
// console.log(slug);

/*
 * –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤.
 */

// const array1 = [5, 10, 15, 20];
// const array2 = [10, 20, 30];

// let total = 0;

// const numbers = array1.concat(array2);
// console.log(numbers);

// for (let number of numbers) {
//     total += number;
// }
// console.log(total);

/*
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ trello
 * - –ú–µ—Ç–æ–¥ splice()
 * - –£–¥–∞–ª–∏—Ç—å
 * - –î–æ–±–∞–≤–∏—Ç—å
 * - –û–±–Ω–æ–≤–∏—Ç—å
 */

// const cards = [
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-1',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-2',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-3',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-4',
//   '–ö–∞—Ä—Ç–æ—á–∫–∞-5',
// ];

// console.table(cards);

/*
 * –£–¥–∞–ª–µ–Ω–∏–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É), –º–µ—Ç–æ–¥ indexOf()
 */
// const cardToRemove = '–ö–∞—Ä—Ç–æ—á–∫–∞-3';
// const index = cards.indexOf(cardToRemove);
// console.log(index);

// cards.splice(index, 1);
// console.table(cards);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
 
// const cardToInsert = '–ö–∞—Ä—Ç–æ—á–∫–∞-6';
// cards.splice(2, 0, cardToInsert);
// console.table(cards);

/*
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
 */
// const cardToUpdate = '–ö–∞—Ä—Ç–æ—á–∫–∞-4';
// const index = cards.indexOf(cardToUpdate);
// console.log(index);
// cards.splice(index, 1, '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞')
// console.table(cards);

// ## Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º

// 1. –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ `genres` –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
// 2. –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
// 3. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// 4. –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
    //–ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É
//    –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// 5. –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// 6. –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

// let genres = ['Jazz', 'Blues'];
// console.log(genres);

// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª');
// console.log(genres);

// console.log(genres[0]);

// console.log(genres[genres.length - 1]);
// // –∏–ª–∏
// const lastElement = genres.length - 1;
// console.log(genres[lastElement]);

// console.log(genres.shift());
// console.log(genres);

// genres.unshift('Country', 'Reggae');
// console.log(genres);

// ## Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è
// —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π `values` —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ
// —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

//  1. —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä–∞—è–¥–æ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞. split
//   2. –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è

// const values = '8 11';

// const valuesArray = values.split(' ');
// console.log(valuesArray);

// const square = valuesArray[0] * valuesArray[1];
// console.log(square);

// ## Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É `fruits` —Ü–∏–∫–ª–æ–º `for`. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ `–Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞`.
// –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ `1`.

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞ = 1: 'üçé'

// for (const fruit of fruits) {
//     console.log(fruit);
//     const index = fruits.indexOf(fruit);
//     console.log(`${index +1}: ${fruit}`)
// }
// –∞–±–æ

// for (let i = 0; i < fruits.length; i += 1){
//     console.log(fruits[i]);
//     console.log(`${i+1}: ${fruits[i]}`)
// }

// ## Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£
// –∑–º—ñ–Ω–Ω–∏—Ö `names` —Ç–∞ `phones` –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
// —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞
// –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

/**
 * 1. –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä–∞—è–¥–∫–∏ –Ω–∞ –º–∞—Å–∏–≤–∏. split
 * 2. –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –æ–¥–∏–Ω –∑ –º–∞—Å–∏–≤—ñ–≤. –ó –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —ñ–Ω–¥–µ–∫—Å–∞ for
 * 3. –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ —ñ–Ω–¥–µ–∫—Å—É —ñ–º º—è —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
 */
// const names = 'Jacob,William,Solomon,Artemis';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// const namesArray = names.split(',');
// const phonesArray = phones.split(',');
// console.log(namesArray);
// console.log(phonesArray);

// for (let i = 0; i < namesArray.length; i += 1) {
//     console.log(`${namesArray[i]} : ${phonesArray[i]}`);
// }

// ## Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ
// –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è
// —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// ```js
// const string = '    Welcome to the future. Be Happy!   ';

// const stringArray = string.trim().split(' ');
// console.log(stringArray);

// stringArray.pop();
// console.log(stringArray);

// stringArray.shift();
// console.log(stringArray);

// const result = stringArray.join(' ');
// console.log(result);

// ## Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å
// –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string1 = 'Welcome to the future';
// let newString = '';

// const newString = string1.split('').reverse().join('');
// console.log(newString);

// –∞–±–æ

// for (let i = string1.length - 1; i >= 0; i -= 1) {
//     newString += string1[i];
// }
// console.log(newString);

// ## Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é
// –µ–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];

// console.log(langs.sort());

// ## Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞

// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è
// –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [2, 17, 94, 1, -10, 23, 37];
// let min = numbers[0];
 
// for (let number of numbers) {
//     if (number < min) {
//         min = number;
//     }
// }
// console.log(min);
// console.log(new String('Hello, world!') === 'Hello, world!')
// console.log(true + 34)

// using System;
// class program
// {
//      static void Main(string[] args)
//      {
//           int x = 8;
//          ¬†int b = 16;
//          ¬†int c = 64;
//          ¬†x /= c /= b;
//          ¬†Console.WriteLine(x + " " + b+ " " +c);
//          ¬†Console.ReadLine();
//      }
// }